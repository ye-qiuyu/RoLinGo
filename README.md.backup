# RoLinGo - README

## 项目简介

RoLinGo 是一款基于 AI 技术的英语口语练习应用，通过图片识别场景，生成符合不同情境的地道表达，同时提供多种风格化角色选择，帮助用户自信开口，提升真实场景下的英语表达能力。项目采用移动端优先的Web开发策略，专注于提供最佳的移动端用户体验。

---

## 目标用户

- **年龄**：18-35 岁
- **人群**：英语学习者，需提升英语表达能力的职场人士

---

## 问题分析

- **市场竞争激烈**：大部分产品停留在词汇识别层面。
- **需求升级**：用户对个性化、场景化学习需求增加。

---

## 核心价值主张

通过场景驱动和角色化体验，让英语表达更加自然、有趣，缩短从学习到实际应用的距离。

---

## 需求概要

| 需求 | 原因 | 合理性及必要性 |
|------|------|----------------|
| 提升特定情境下的表达能力 | 用户难以将所学应用到实际场景（如旅行、社交、小组讨论），常感到"学了却用不上" | 通过场景识别技术生成真实情境下的表达示例��帮助用户将学习内容与生活需求相结合，实现即学即用的表达提升 |
| 多角色表达体验 | 单一的表达方式无法满足不同情境需求（如幽默、正式、愤怒等） | 提供多种表达风格的示例和关键词高亮，帮助用户探索适合特定情境的语言风格规律，让用户快速适应并应用于真实场景 |
| 降低开口表达的心理压力 | 用户在真实场景中因害怕犯错或发音问题而不敢开口 | 通过关键词检测和反馈机制，营造低压力的练习环境，专注表达尝试，逐步提升自信心 |

---

## 功能列表

| 功能点          | 描述                         | 优先级 |
|------------------|------------------------------|--------|
| 场景识别        | AI 识别照片中的场景和物体    | P0     |
| 角色模式        | 六种不同性格的表达风格       | P0     |
| 表达生成        | 基于场景和角色生成地道表达   | P0     |
| 跟读反馈        | 跟读检测并反馈发音情况       | P1     |
| 卡片记录        | 记录学习进度及词汇积累       | P2     |

---

## 用户操作与技术实现流程

### 1. 输入阶段

系统支持两种输入方式：
- **照片输入**：利用图像识别技术提取照片中的核心场景信息和物体类别
- **语音输入**：通过语音识别技术将语音转化为文本，结合用户学习记录和语言水平提取关键词

### 2. 关键词内容提取

系统进行智能化的关键词提取与分类：
- **个性化提取**：根据用户历史学习记录和当前语言水平，提取适合的学习内容
- **NLP分析分类**：
  - 场景描述（物体、环境标签）
  - 语境信息（行为、情绪）

### 3. 功能模块实现

#### P0: 照片词汇展示
- 以卡片形式在图片对应位置标注关键词
- 建立图像与学习内容的直观关联

#### P0: 角色风格表达 / 关键词提示
- 用户选择角色风格（如幽默、正式等）
- 系统结合关键词和角色风格生成 prompt
- 通过 LLM 模型生成地道表达
- 高亮显示风格相关关键词

示例：
- 输入关键词：沙滩、放松
- 角色选择：幽默
- 生成表达：*"在沙滩上晒太阳，连椰子树都笑弯了腰"*
- 高亮关键词：沙滩、椰子树

#### P1: 跟读反馈
- 语音识别检测用户发音
- 与标准发音对比分析
- 提供发音评分和改进建议

#### P2: 卡片生成
- 整合学习内容（关键词、表达、进度）
- 标注图片中的学习位置
- 支持收藏和分享功能

### 4. 生成与反馈阶段

用户可进行以下操作：
- **播放**：语音朗读生成的表达内容
- **��藏**：保存内容供后续学习
- **重新生成**：调整场景或角色，生成新表达

---

## 产品流程

```mermaid
graph TD
    A[打开应用] --> B[���照/上传图片/语音输入]
    B --> C[选择角色]
    C --> D[获取表达建议]
    D --> E[学习/练习]
    E --> F[保存/分享]
``` 

---

## 技术架构

### 开发策略
- **移动端优先**：专注于移动端UI/UX设计
- **设备适配**：优化适配iPhone各机型
- **开发模式**：本地开发 + 云端部署

### 前端技术栈
- **核心框架**：React + TypeScript
- **UI框架**：Ionic Framework（iOS风格组件）
- **样式**：TailwindCSS
- **构建工具**：Vite

### 部署方案
- **开发环境**：
  - 本地开发服务器
  - 局域网内设备访问测试
  
- **生产环境**：
  - 前端部署：Vercel（免费计划）
  - 域名方案：
    - 开发阶段：使用Vercel提供的二级域名
    - 正式环境：自定义域名（待购买）
  - 静态资源：Cloudflare CDN
  - HTTPS 证书：Let's Encrypt（免费）

### 设备兼容性
- **目标设备**：iPhone系列
- **系统要求**：iOS 14.0+
- **浏览器要求**：Safari最新版
- **屏幕适配**：
  - 最小支持：iPhone SE尺寸
  - 最大优化：iPhone Pro Max尺寸

### 移动端开发
- **设计规范**：iOS Human Interface Guidelines
- **屏幕适配**：iPhone系列机型
- **设备功能**：
  - 相机调用
  - 麦克风接入
  - 本地存储

### 后端服务
- **服务器**：Node.js + Express
- **数据库**：MongoDB
- **文件存储**：AWS S3

### AI 服务
- **图像识别**：Google Cloud Vision API
- **语音识别**：OpenAI Whisper API
- **文本生成**：OpenAI GPT-4 API

### 开发环境
- **开发工具**：
  - VS Code（代码编辑器）
  - Chrome DevTools（调试工具）
  - Xcode（iOS模拟器）
- **本地开发流程**：
  1. MacBook运行开发服务器
  2. iPhone通过局域网访问
  3. 实时预览修改效果

### 测试环境
- **本地测试**：
  - iOS模拟器
  - iPhone真机测试
- **调试工具**：
  - Safari开发者工具
  - React Developer Tools

---

## 开发计划

### MVP阶段（1-2周）
#### 第一步：基础框架（2-3天）
- 创建项目基础结构
- 搭建最简单的页面框架
- 实现图片上传功能

#### 第二步：核心功能（3-4天）
- 接入基础AI识别（单一场景）
- 实现最简单的对话生成
- 完成基础UI展示

#### 第三步：基础体验（2-3天）
- 实现最基本的交互流程
- 确保核心功能稳定
- 进行简单的错误处理

### 后续迭代
1. **功能完善期**：
   - 添加相机拍照功能
   - 实现多角色系统
   - 优化AI识别准确度

2. **体验优化期**：
   - 改进UI/UX设计
   - 添加动画效果
   - 优化加载速度

3. **功能扩展期**：
   - 实现语音功能
   - 添加学习记录
   - 实现分享功能

---

## MVP功能清单

### 必须实现（P0）
1. **图片处理**
   - 基础图片上传
   - 简单的图片展示

2. **AI功能**
   - 基础场景识别
   - 简单对话生成

3. **界面**
   - 主页面
   - 结果展示页面

### 暂不实现
- 相机实时拍照
- 多角色系统
- 语音功能
- 学习记录
- 分享功能
- 付费系统

---

## 开发环境搭建指南

1. **基础环境配置**
```bash
# 安装Node.js和npm（建议使用nvm）
brew install nvm
nvm install 18
nvm use 18

# 创建项目
npm create vite@latest rolingo -- --template react-ts

# 安装依赖
cd rolingo
npm install
```

2. **启动开发服务器**
```bash
npm run dev
```

3. **在iPhone上访问**
- 确保MacBook和iPhone在同一WiFi下
- 在终端查看本地IP地址：`ipconfig getifaddr en0`
- 在iPhone浏览器访问：`http://[你的IP地址]:5173`

---

## 商业模式

### 免费版
- 每日10次场景识别额度
- 基础角色使用
- 广告展示

### 订阅版
- 无限场景识别
- 所有角色解锁
- 去除广告
- 高级AI模型使用
- 学习数据分析 

## 开发环境要求

### 开发设备
- MacBook M3 Pro
- iPhone 15（测试设备）

### 软件环境
- Node.js 18+
- VS Code
- Git
- Chrome/Safari（开发调试）

### 开发流程
1. **本地开发**：
   - 使用本地开发服务器
   - 通过局域网IP访问测试
   - 实时热更新预览

2. **测试部署**：
   - 自动部署到Vercel
   - 提供临时访问链接
   - 进行线上测试

3. **正式部署**：
   - 确认功能无误
   - 绑定正式域名
   - 开启CDN加速 